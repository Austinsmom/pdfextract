#!/usr/bin/env ruby

require 'commander/import'
require_relative '../lib/pdf-extract'

program :name, 'pdf-extract'
program :version, '0.0.1'
program :description, 'PDF content extraction toolkit'

semantic = ['titles']
margins = ['top_margins', 'bottom_margins', 'left_margins', 'right_margins']
zones = ['headers', 'footers', 'bodies']
objects = ['characters', 'chunks', 'regions'] + semantic + margins + zones

outputs = {
  :xml => proc { :stdout },
  :pdf => proc { |f| File::basename(f.sub /\.[a-zA-Z0-9]+\Z/, "") + ".mask.pdf" },
  :png => proc { |f| File::basename(f.sub /\.[a-zA-Z0-9]+\Z/, "") + ".mask.png" }
}

$chosen_objects = []

global_option "--semantic" do |_| $chosen_objects += semantic end
global_option "--margins" do |_| $chosen_objects += margins end
global_option "--zones" do |_| $chosen_objects += zones end

objects.each do |o|
  global_option "--#{o}" do |_|
    $chosen_objects << o
  end
end

global_option "--output=FILE" do |filename|
  $output = filename
end

outputs.each_key do |view|
  command view.to_sym do |c|
    c.syntax = "pdf-extract #{view} [objects] filename"
    c.description = "Output selected objects as #{view.upcase}."

    c.action do |args, options|
      args.each do |filename|
        $output = outputs[view].call(filename) if $output.nil?
        out = PdfExtract.view filename, :as => view.to_sym do |pdf|
          $chosen_objects.each do |name|
            pdf.send name.to_sym
          end
        end

        if $output == :stdout
          say out
        else
          PdfExtract.view_class(view).write(out, $output)
        end
      end
    end

  end
end
