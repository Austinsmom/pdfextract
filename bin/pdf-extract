#!/usr/bin/env ruby

require 'commander/import'
require_relative '../lib/pdf-extract'
require_relative '../lib/references/resolve'

program :name, 'pdf-extract'
program :version, '0.0.1'
program :description, 'PDF content extraction toolkit'

semantic = ['resolved_references', 'references', 'titles', 'sections']
margins = ['top_margins', 'bottom_margins', 'left_margins', 'right_margins']
zones = ['headers', 'footers', 'bodies']
objects = ['characters', 'chunks', 'regions', 'columns'] + semantic + margins + zones

resolvers = {
  "sigg" => PdfExtract::Resolve::Sigg,
  "freecite" => PdfExtract::Resolve::FreeCite,
  "stq" => PdfExtract::Resolve::SimpleTextQuery
}

outputs = {
  :xml => proc { :stdout },
  :pdf => proc { |f| File::basename(f.sub /\.[a-zA-Z0-9]+\Z/, "") + ".mask.pdf" },
  :png => proc { |f| File::basename(f.sub /\.[a-zA-Z0-9]+\Z/, "") + ".mask.png" }
}

commands = [
  {
    :name => "extract",
    :view => :xml,
    :description => "Extract objects as XML."
  },
  {
    :name => "mark",
    :view => :pdf,
    :description => "Highlight bounding boxes of objects in a PDF."
  },
  {
    :name => "annotate",
    :view => :not_implemented,
    :description => "Annotate a PDF with attributes of extracted objects."
  }
]

$chosen_objects = []

$render_options = {}

objects.each do |o|
  global_option "--#{o}" do |_|
    $chosen_objects << o
  end
end

global_option "--semantic" do |_| $chosen_objects += semantic end
global_option "--margins" do |_| $chosen_objects += margins end
global_option "--zones" do |_| $chosen_objects += zones end

global_option "--resolvers RESOLVERS" do |chosen_resolvers|
  chosen_resolvers = chosen_resolvers.split ","
  chosen_resolvers.each do |name|
    fail "No such resolver #{resolver}" unless resolvers.key? name
  end
  chosen_resolvers.map! { |name| resolvers[name] }
  PdfExtract::Resolve.resolvers = chosen_resolvers
end

global_option "--output FILE" do |filename|
  $output = filename
end

global_option "--no-lines" do |_|
  $render_options.merge!({:lines => false})
end

global_option "--precision DIGITS" do |digits|
  $render_options.merge!({:round => digits.to_i})
end

commands.each do |cmd|
  command cmd[:name].to_sym do |c|
    c.syntax = "pdf-extract #{cmd[:name]} filename [options]"
    c.description = cmd[:description]

    c.action do |args, options|
      args.each do |filename|
        $output = outputs[cmd[:view]].call(filename) if $output.nil?
        opts = {:as => cmd[:view]}.merge $render_options
        out = PdfExtract.view filename, opts do |pdf|
          $chosen_objects.each do |name|
            pdf.send name.to_sym
          end
        end

        if $output == :stdout
          say out
        else
          PdfExtract.view_class(cmd[:view]).write(out, $output)
        end
      end
    end

  end
end

