#!/usr/bin/env ruby

# Grab some DOIS and metadata via OAI PMH.

# Record metadata in the test-data dir.

# If there is no corresponding PDF in the test-data dir, download it using
# get-pdf.

require 'cgi'
require 'net/http'
require 'uri/http'
require 'commander/import'
require 'nokogiri'
require 'json'

program :name, "catalog"
program :version, "0.0.1"
program :description, "Build a PDF catalog, with metadata."

def query_uri verb, options={}
  prefix = options[:prefix]
  journal = options[:journal]
  year = options[:year]

  if prefix.nil? || (!year.nil? && journal.nil?)
    fail "Must specify one of prefix, prefix:journal, or prefix:journal:year."
  end
  
  set = CGI.escape [prefix, journal, year].compact.join(":")
  q = "verb=#{verb}&metadataPrefix=cr_unixml&set=#{set}"
  URI::HTTP.build({
    :host => "oai.crossref.org",
    :path => "/OAIHandler",
    :query => q
  })
end

def parse_dois xml
  doc = Nokogiri::XML::Document.parse xml
  identifiers = doc.css "identifier"
  identifiers.map { |id| id.text.sub "info:doi/", "" }
end

def parse_records xml
  doc = Nokogiri::XML::Document.parse xml

  doc.css("metadata").map do |metadata|
    #publication = {
      # :title => metadata.at_css("full_title").text,
    #   :issue => metadata.at_css("issue").text,
    #   :volume => metadata.at_css("volume").text
    # }

    contributors = metadata.css("person_name").map do |name|
      name.at_css("given_name").text + " " + name.at_css("surname")
    end

    {
      :doi => metadata.at_css("doi").text,
      :first_page => metadata.at_css("first_page").text,
      :last_page => metadata.at_css("last_page").text,
      :publication => publication,
      :contributors => contibutors
    }
  end
end

def get_records options
  uri = query_uri "ListRecords", options

  Net::HTTP.start uri.host do |http|
    response = http.get uri.request_uri

    if response.code.to_i == 200
      parse_records response.body
    else
      fail "Failed to get metadata. OAI server returned: #{response.code}"
    end
  end
end

def catalog_filename
  File.join File.dirname(__FILE__), "catalog.json"
end

def read_catalog filename=catalog_filename
  if File.exists? filename
    File.open filename do |file|
      JSON.load file
    end
  else
    say "Created a new catalog."
    {}
  end
end

def write_catalog catalog, filename=catalog_filename
  File.open filename, "w" do |file|
    file.write catalog.to_json
  end
end

def with_catalog &block
  catalog = read_catalog
  yield catalog
  write_catalog catalog
end

$set_spec = {}

["prefix", "journal", "year"].each do |item|
  global_option "--#{item.downcase}=#{item.upcase}" do |value|
    $set_spec[item.to_sym] = value
  end
end

command :populate do |c|
  c.syntax = "catalog populate --prefix=10.5555 --journal=5 --year=2002"
  c.description = "Add CrossRef metadata to a catalog."

  c.action do |args, options|
    records = get_records $set_spec

    with_catalog do |catalog|
      records.each do |record|
        catalog[record[:doi]] = record.merge(:from => $set_spec)
      end
    end
  end
end

command :pdfs do |c|
  c.syntax = "catalog pdfs"
  c.description = "Locate and download PDFs for DOIs in a catalog."

  c.action do |args, options|
  end
end
